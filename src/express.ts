/*
 * Copyright 2022 SpinalCom - www.spinalcom.com
 *
 * This file is part of SpinalCore.
 *
 * Please read all of the following terms and conditions
 * of the Free Software license Agreement ("Agreement")
 * carefully.
 *
 * This Agreement is a legally binding contract between
 * the Licensee (as defined below) and SpinalCom that
 * sets forth the terms and conditions that govern your
 * use of the Program. By installing and/or using the
 * Program, you agree to abide by all the terms and
 * conditions stated or referenced herein.
 *
 * If you do not agree to abide by these terms and
 * conditions, do not demonstrate your acceptance and do
 * not install or use the Program.
 * You should have received a copy of the license along
 * with this file. If not, see
 * <http://resources.spinalcom.com/licenses.pdf>.
 */

import * as cors from 'cors';
import * as express from 'express';
import * as morgan from 'morgan';
import * as https from "https";
import * as fs from "fs";

import { RegisterRoutes } from './routes';
import { WebSocketServer } from './proxy/websocket';
import { useLoginProxy } from './proxy/login';
import configureBosProxy from './proxy/bos';
import { errorHandler, initSwagger, useApiMiddleWare, useProxyToHub, useViewMiddleWare } from './utils/expressMiddlewares';


export default async function launchExpressServer(serverPort: string, serverProtocol: "http" | "https" = "http") {

	var app = express();
	app.use(morgan('dev')); // Log HTTP requests to the console
	app.use(cors({ origin: '*' })); // Enable CORS for all origins

	configureBosProxy(app); // use proxy to redirect all /building/* routes to the specific BOS API server
	configureBosProxy(app, true);

	useApiMiddleWare(app); // Middleware to parse JSON and URL-encoded data

	useProxyToHub(app); // redirect all /html/* routes to the hub

	useLoginProxy(app);

	useViewMiddleWare(app); // Serve static files and redirect root to /docs

	initSwagger(app); // Initialize Swagger UI

	RegisterRoutes(app); // Register API routes generated by tsoa

	app.use(errorHandler); // Global error handler


	let server;

	if (serverProtocol === "https") {
		// If using HTTPS, ensure SSL_KEY_PATH and SSL_CERT_PATH are set in the environment variables
		const sslOptions = { key: fs.readFileSync(process.env.SSL_KEY_PATH), cert: fs.readFileSync(process.env.SSL_CERT_PATH) };
		server = https.createServer(sslOptions, app).listen(serverPort, () => console.log(`app listening at https://localhost:${serverPort} ....`));
	} else if (serverProtocol === "http") {
		server = app.listen(serverPort, () => console.log(`app listening at http://localhost:${serverPort} ....`));
	}

	// Initialize WebSocket server
	const websocketServer = new WebSocketServer(server);
	await websocketServer.initialize();

	return { server, app };
}


