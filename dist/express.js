"use strict";
/*
 * Copyright 2022 SpinalCom - www.spinalcom.com
 *
 * This file is part of SpinalCore.
 *
 * Please read all of the following terms and conditions
 * of the Free Software license Agreement ("Agreement")
 * carefully.
 *
 * This Agreement is a legally binding contract between
 * the Licensee (as defined below) and SpinalCom that
 * sets forth the terms and conditions that govern your
 * use of the Program. By installing and/or using the
 * Program, you agree to abide by all the terms and
 * conditions stated or referenced herein.
 *
 * If you do not agree to abide by these terms and
 * conditions, do not demonstrate your acceptance and do
 * not install or use the Program.
 * You should have received a copy of the license along
 * with this file. If not, see
 * <http://resources.spinalcom.com/licenses.pdf>.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = launchExpressServer;
const cors = require("cors");
const express = require("express");
const morgan = require("morgan");
const https = require("https");
const fs = require("fs");
const routes_1 = require("./routes");
const websocket_1 = require("./proxy/websocket");
const login_1 = require("./proxy/login");
const bos_1 = require("./proxy/bos");
const expressMiddlewares_1 = require("./utils/expressMiddlewares");
async function launchExpressServer(serverPort, serverProtocol = "http") {
    var app = express();
    app.use(morgan('dev')); // Log HTTP requests to the console
    app.use(cors({ origin: '*' })); // Enable CORS for all origins
    (0, bos_1.default)(app); // use proxy to redirect all /building/* routes to the specific BOS API server
    (0, bos_1.default)(app, true);
    (0, expressMiddlewares_1.useApiMiddleWare)(app); // Middleware to parse JSON and URL-encoded data
    (0, expressMiddlewares_1.useProxyToHub)(app); // redirect all /html/* routes to the hub
    (0, login_1.useLoginProxy)(app);
    (0, expressMiddlewares_1.useViewMiddleWare)(app); // Serve static files and redirect root to /docs
    (0, expressMiddlewares_1.initSwagger)(app); // Initialize Swagger UI
    (0, routes_1.RegisterRoutes)(app); // Register API routes generated by tsoa
    app.use(expressMiddlewares_1.errorHandler); // Global error handler
    let server;
    if (serverProtocol === "https") {
        // If using HTTPS, ensure SSL_KEY_PATH and SSL_CERT_PATH are set in the environment variables
        const sslOptions = { key: fs.readFileSync(process.env.SSL_KEY_PATH), cert: fs.readFileSync(process.env.SSL_CERT_PATH) };
        server = https.createServer(sslOptions, app).listen(serverPort, () => console.log(`app listening at https://localhost:${serverPort} ....`));
    }
    else if (serverProtocol === "http") {
        server = app.listen(serverPort, () => console.log(`app listening at http://localhost:${serverPort} ....`));
    }
    // Initialize WebSocket server
    const websocketServer = new websocket_1.WebSocketServer(server);
    await websocketServer.initialize();
    return { server, app };
}
//# sourceMappingURL=express.js.map